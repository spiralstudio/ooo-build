<project name="ooo-maven-macros" xmlns:artifact="urn:maven-artifact-ant">
  <macrodef name="checkpomoridset">
    <attribute name="id"/>
    <sequential>
      <if>
        <equals arg1="@{id}" arg2=""/>
        <then>
          <fail message="Either id or pom must be set"/>
        </then>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="mavendep"
      description="Fetches maven dependencies for an id and caches the dependency resolution">
    <attribute name="pom" default=""/>
    <attribute name="id" default="@{pom}"/>
    <attribute name="fileset" default="@{id}.fileset"/>
    <attribute name="path" default="@{id}.path"/>
    <attribute name="cacheDependencyRefs" default="true"/>
    <attribute name="dependencyFile" default=""/>
    <attribute name="pathProp" default=""/>
    <attribute name="pathSep" default=","/>
    <attribute name="destdir" default=""/>
    <attribute name="scope" default="compile"/>
    <element name="dependencies-elements" implicit="true" optional="true"/>
    <sequential>
      <checkpomoridset id="@{id}"/>
      <if>
        <equals arg1="@{cacheDependencyRefs}" arg2="true"/>
        <then>
          <if>
            <not><equals arg1="@{dependencyFile}" arg2=""/></not>
            <then>
              <var name="derivedDependencyFile" value="@{dependencyFile}"/>
            </then>
            <elseif>
              <not><matches string="${target.dir}" pattern="^\$\{"/></not>
              <then>
                <var name="derivedDependencyFile" value="${target.dir}/@{id}.dependencies"/>
              </then>
            </elseif>
            <elseif>
              <not><matches string="${deploy.dir}" pattern="^\$\{"/></not>
              <then>
                <var name="derivedDependencyFile" value="${deploy.dir}/@{id}.dependencies"/>
              </then>
            </elseif>
            <else>
              <fail message="dependencyFile must be set on mavendep if ${deploy.dir} or ${target.dir} isn't set"/>
            </else>
          </if>
        </then>
      </if>
      <if>
        <equals arg1="@{cacheDependencyRefs}" arg2="true"/>
        <then>
          <if>
            <not><equals arg1="@{pom}" arg2=""/></not>
            <then>
              <artifact:dependencies filesetId="@{fileset}" pathId="@{path}" useScope="@{scope}"
                cacheDependencyRefs="true" dependencyRefsBuildFile="${derivedDependencyFile}">
                <pom file="@{pom}"/>
                <dependencies-elements/>
              </artifact:dependencies>
            </then>
            <else>
              <artifact:dependencies filesetId="@{fileset}" pathId="@{path}" useScope="@{scope}"
                cacheDependencyRefs="true" dependencyRefsBuildFile="${derivedDependencyFile}">
                <dependencies-elements/>
              </artifact:dependencies>
            </else>
          </if>
        </then>
        <else>
          <if>
            <not><equals arg1="@{pom}" arg2=""/></not>
            <then>
              <artifact:dependencies filesetId="@{fileset}" pathId="@{path}" useScope="@{scope}">
                <pom file="@{pom}"/>
                <dependencies-elements/>
              </artifact:dependencies>
            </then>
            <else>
              <artifact:dependencies filesetId="@{fileset}" pathId="@{path}" useScope="@{scope}">
                <dependencies-elements/>
              </artifact:dependencies>
            </else>
          </if>
        </else>
      </if>
      <if>
        <not><equals arg1="@{pathProp}" arg2=""/></not>
        <then><pathconvert pathsep="@{pathSep}" property="@{pathProp}" refid="@{fileset}"/></then>
      </if>
      <if>
        <not><equals arg1="@{destDir}" arg2=""/></not>
        <then>
          <copy todir="@{destDir}">
            <fileset refid="@{fileset}"/>
            <chainedmapper>
              <mapper type="flatten"/>
              <!-- Strip the version off.  Maven versions look like this:
                <MajorVersion>[.<MinorVersion>[.<IncrementalVersion>]][-<BuildNumber|Qualifier>]
                  The first regexp removes the dash qualifier if it exists -->
              <mapper type="regexp" from="(.+?)(-\w+)?\.(\w+?)$" to="\1.\3"/>
              <!-- And this regexp gets the version numbers -->
              <mapper type="regexp" from="(.+?)(-\d.*)?\.(\w+?)$" to="\1.\3"/>
            </chainedmapper>
          </copy>
        </then>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="cleanmavendepcache">
    <attribute name="pom" default=""/>
    <attribute name="id" default="@{pom}"/>
    <attribute name="dependencyFile" default="${deploy.dir}/@{id}.dependencies"/>
    <sequential>
      <checkpomoridset id="@{id}"/>
      <delete file="@{dependencyFile}"/>
    </sequential>
  </macrodef>

  <macrodef name="mavendeploy">
    <attribute name="pom"/>
    <attribute name="file"/>
    <attribute name="srcdir" default=""/>
    <sequential>
      <if>
        <isset property="maven.deploy.repo"/>
        <then>
          <!-- We've got a loc, so we need to deploy. If srcdir is set, jar up the source and
            include it in the deployment. Otherwise just deploy the artifact. -->
          <if>
            <not><equals arg1="@{srcdir}" arg2=""/></not>
            <then>
              <tempfile property="@{srcdir}.jar" prefix="source" suffix=".jar" deleteonexit="true"/>
              <jar basedir="@{srcdir}" destfile="${@{srcdir}.jar}"/>
              <artifact:deploy file="@{file}" uniqueVersion="false">
                <remoteRepository url="${maven.deploy.repo}"/>
                <pom file="@{pom}"/>
                <attach file="${@{srcdir}.jar}" classifier="sources"/>
              </artifact:deploy>
            </then>
            <else>
              <artifact:deploy file="@{file}" uniqueVersion="false">
                <remoteRepository url="${maven.deploy.repo}"/>
                <pom file="@{pom}"/>
              </artifact:deploy>
            </else>
          </if>
        </then>
        <else>
          <!-- No loc specified, so install it in the local repo and don't worry about source -->
          <artifact:install file="@{file}">
            <pom file="@{pom}"/>
          </artifact:install>
        </else>
      </if>
    </sequential>
  </macrodef>
  <macrodef name="maventaskdef">
    <attribute name="groupId"/>
    <attribute name="artifactId"/>
    <attribute name="version"/>
    <attribute name="id" default="@{groupId}.@{artifactId}-@{version}-taskdef"/>
    <attribute name="resource" default=""/>
    <attribute name="cacheDependencyRefs" default="true"/>
    <element name="dependencies-elements" implicit="true" optional="true"/>
    <sequential>
      <if>
        <not><isset property="@{id}-run"/></not>
        <then>
          <if>
            <equals arg1="@{resource}" arg2=""/>
            <then>
              <propertyregex property="resource-group-id"
                  input="@{groupId}."
                  regexp="([^\.]*?)\."
                  replace="\1/"
                  global="true"
                  override="true"/>
              <var name="current-resource" value="${resource-group-id}@{artifactId}/antlib.xml"/>
            </then>
            <else>
              <var name="current-resource" value="@{resource}"/>
            </else>
          </if>
          <mavendep id="@{id}" cacheDependencyRefs="@{cacheDependencyRefs}">
            <dependency groupId="@{groupId}" artifactId="@{artifactId}" version="@{version}"/>
            <remoteRepository id="ooo-public" url="http://ooo-maven.googlecode.com/hg/repository"/>
            <dependencies-elements/>
          </mavendep>
          <taskdef resource="${current-resource}" classpathref="@{id}.path"
            loaderref="@{id}.loader"/>
          <property name="@{id}-run" value="true"/>
        </then>
      </if>
    </sequential>
  </macrodef>
</project>

